import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')
class SalesPredictor:
    def __init__(self, data_path):
        """
        Initialize Sales Predictor with dataset
        """
        self.df = pd.read_csv(data_path, index_col=0)
        self.X = None
        self.y = None
        self.X_train = None
        self.X_test = None
        self.y_train = None
        self.y_test = None
        self.models = {}
        
    def explore_data(self):
        """
        Task 3: Data Exploration and Analysis
        """
        print("=" * 50)
        print("TASK 3: DATA EXPLORATION")
        print("=" * 50)
        
        # Basic dataset info
        print(f"Dataset Shape: {self.df.shape}")
        print("\nFirst 5 rows:")
        print(self.df.head())
        
        print("\nDataset Information:")
        print(self.df.info())
        
        print("\nDescriptive Statistics:")
        print(self.df.describe())
        
        # Check for missing values
        print("\nMissing Values:")
        print(self.df.isnull().sum())
        
    def visualize_data(self):
        """
        Task 4: Data Visualization
        """
        print("\n" + "=" * 50)
        print("TASK 4: DATA VISUALIZATION")
        print("=" * 50)
        
        # Set up the plotting style
        plt.style.use('seaborn-v0_8')
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('Advertising Data Analysis', fontsize=16, fontweight='bold')
        
        # 1. Distribution of Sales
        axes[0,0].hist(self.df['Sales'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        axes[0,0].set_title('Distribution of Sales')
        axes[0,0].set_xlabel('Sales')
        axes[0,0].set_ylabel('Frequency')
        
        # 2. TV Ads vs Sales
        axes[0,1].scatter(self.df['TV'], self.df['Sales'], alpha=0.6, color='red')
        axes[0,1].set_title('TV Advertising vs Sales')
        axes[0,1].set_xlabel('TV Ad Budget')
        axes[0,1].set_ylabel('Sales')
        
        # 3. Radio Ads vs Sales
        axes[0,2].scatter(self.df['Radio'], self.df['Sales'], alpha=0.6, color='green')
        axes[0,2].set_title('Radio Advertising vs Sales')
        axes[0,2].set_xlabel('Radio Ad Budget')
        axes[0,2].set_ylabel('Sales')
        
        # 4. Newspaper Ads vs Sales
        axes[1,0].scatter(self.df['Newspaper'], self.df['Sales'], alpha=0.6, color='orange')
        axes[1,0].set_title('Newspaper Advertising vs Sales')
        axes[1,0].set_xlabel('Newspaper Ad Budget')
        axes[1,0].set_ylabel('Sales')
        
        # 5. Correlation Heatmap
        correlation_matrix = self.df.corr()
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', center=0, 
                   ax=axes[1,1], fmt='.2f', linewidths=0.5)
        axes[1,1].set_title('Correlation Matrix')
        
        # 6. Boxplot of advertising channels
        ad_data = self.df[['TV', 'Radio', 'Newspaper']]
        axes[1,2].boxplot(ad_data.values, labels=ad_data.columns)
        axes[1,2].set_title('Advertising Budget Distribution')
        axes[1,2].set_ylabel('Budget Amount')
        
        plt.tight_layout()
        plt.show()
        
        # Print correlation with sales
        print("\nCorrelation with Sales:")
        for column in ['TV', 'Radio', 'Newspaper']:
            corr = self.df[column].corr(self.df['Sales'])
            print(f"{column}: {corr:.3f}")
    
    def prepare_data(self):
        """
        Step 34: Data Preparation for Modeling
        """
        print("\n" + "=" * 50)
        print("STEP 34: DATA PREPARATION")
        print("=" * 50)
        
        # Prepare features and target
        self.X = self.df[['TV', 'Radio', 'Newspaper']]
        self.y = self.df['Sales']
        
        # Split the data
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(
            self.X, self.y, test_size=0.2, random_state=42
        )
        
        print(f"Training set size: {self.X_train.shape[0]}")
        print(f"Test set size: {self.X_test.shape[0]}")
        print(f"Features: {list(self.X.columns)}")
    def build_models(self):
        """
        Step 35: Model Building
        """
        print("\n" + "=" * 50)
        print("STEP 35: MODEL BUILDING")
        print("=" * 50)
        # Linear Regression
        lr_model = LinearRegression()
        lr_model.fit(self.X_train, self.y_train)
        self.models['Linear Regression'] = lr_model
        # Random Forest Regressor
        rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
        rf_model.fit(self.X_train, self.y_train)
        self.models['Random Forest'] = rf_model
        print("Models trained successfully:")
        for model_name in self.models.keys():
            print(f"- {model_name}")
    def evaluate_models(self):
        """
        Step 36: Model Evaluation
        """
        print("\n" + "=" * 50)
        print("STEP 36: MODEL EVALUATION")
        print("=" * 50)
        results = []
        for model_name, model in self.models.items():
            # Make predictions
            y_pred = model.predict(self.X_test)
            # Calculate metrics
            mae = mean_absolute_error(self.y_test, y_pred)
            mse = mean_squared_error(self.y_test, y_pred)
            rmse = np.sqrt(mse)
            r2 = r2_score(self.y_test, y_pred)
            results.append({
                'Model': model_name,
                'MAE': mae,
                'RMSE': rmse,
                'R² Score': r2
            })
            print(f"\n{model_name} Performance:")
            print(f"MAE: {mae:.3f}")
            print(f"RMSE: {rmse:.3f}")
            print(f"R² Score: {r2:.3f}")
        # Create results dataframe
        results_df = pd.DataFrame(results)
        # Visualize model performance
        plt.figure(figsize=(12, 4))
        # R² Score comparison
        plt.subplot(1, 3, 1)
        plt.bar(results_df['Model'], results_df['R² Score'], color=['blue', 'green'])
        plt.title('R² Score Comparison')
        plt.ylabel('R² Score')
        plt.xticks(rotation=45)
        # RMSE comparison
        plt.subplot(1, 3, 2)
        plt.bar(results_df['Model'], results_df['RMSE'], color=['blue', 'green'])
        plt.title('RMSE Comparison')
        plt.ylabel('RMSE')
        plt.xticks(rotation=45)
        # MAE comparison
        plt.subplot(1, 3, 3)
        plt.bar(results_df['Model'], results_df['MAE'], color=['blue', 'green'])
        plt.title('MAE Comparison')
        plt.ylabel('MAE')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.show()
        return results_df
    def predict_sales(self, tv_budget, radio_budget, newspaper_budget):
        """
        Make sales prediction for new advertising budget
        """
        best_model_name = max(self.models.keys(), 
                             key=lambda x: r2_score(self.y_test, self.models[x].predict(self.X_test)))
        best_model = self.models[best_model_name]
        input_data = np.array([[tv_budget, radio_budget, newspaper_budget]])
        prediction = best_model.predict(input_data)[0]
        print(f"\n" + "=" * 50)
        print("SALES PREDICTION RESULT")
        print("=" * 50)
        print(f"Advertising Budget:")
        print(f"  TV: ${tv_budget:.2f}")
        print(f"  Radio: ${radio_budget:.2f}")
        print(f"  Newspaper: ${newspaper_budget:.2f}")
        print(f"Predicted Sales: ${prediction:.2f}")
        print(f"Model Used: {best_model_name}")
        return prediction
    def feature_importance(self):
        """
        Analyze feature importance
        """
        if 'Random Forest' in self.models:
            rf_model = self.models['Random Forest']
            feature_imp = pd.DataFrame({
                'feature': self.X.columns,
                'importance': rf_model.feature_importances_
            }).sort_values('importance', ascending=False)
            plt.figure(figsize=(8, 6))
            plt.barh(feature_imp['feature'], feature_imp['importance'], color='lightcoral')
            plt.xlabel('Feature Importance')
            plt.title('Random Forest Feature Importance')
            plt.gca().invert_yaxis()
            plt.show()
            print("\nFeature Importance (Random Forest):")
            print(feature_imp)
def main():
    """
    Main function to run the complete sales prediction pipeline
    """
    # Initialize the sales predictor
    predictor = SalesPredictor('Advertising.csv')
    # Execute all tasks
    predictor.explore_data()      # Task 3
    predictor.visualize_data()    # Task 4
    predictor.prepare_data()      # Step 34
    predictor.build_models()      # Step 35
    results = predictor.evaluate_models()  # Step 36
    # Additional analysis
    predictor.feature_importance()
    # Example prediction
    print("\n" + "=" * 60)
    print("EXAMPLE PREDICTION")
    print("=" * 60)
    predictor.predict_sales(tv_budget=200, radio_budget=40, newspaper_budget=30)
    # Display final results
    print("\n" + "=" * 60)
    print("FINAL MODEL COMPARISON")
    print("=" * 60)
    print(results.to_string(index=False))
if __name__ == "__main__":
    main()
